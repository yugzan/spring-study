buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
        isLibrary = false
    }
    repositories {
        mavenCentral()
	    maven { url "http://repo.spring.io/release" }
	    maven { url "http://repo.spring.io/milestone" }
	    maven { url "http://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
    }
}
//apply from: 'maven-publish.gradle'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

group = 'org.yugzan'
version = '0.0.3-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
/*
jar {
    baseName = 'account-manager'
    version = '0.0.3-SNAPSHOT'
}*/

// custom tasks for creating source jars

task sourcesJar(type: Jar, dependsOn:classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}
artifacts { archives sourcesJar }

repositories {
  	mavenLocal()
  	/*maven {
  	  name "nexus maven proxy"
  	  url "http://140.92.71.209:8080/nexus/content/groups/public"
  	}*/
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.data:spring-data-mongodb:1.7.2.RELEASE")
    compile("org.mongodb:mongo-java-driver:2.13.0")
  	compile("com.fasterxml.jackson.core:jackson-databind:2.4.2")
 	compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.4.2")
    compile("org.apache.commons:commons-lang3:3.3.2")
    //compile("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
}

/*
eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}*/

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}
if(isLibrary){
	springBoot { mainClass = 'org.test.account.AccountManagerApplication' }
	gradle.taskGraph.whenReady { graph ->
	    def badTasks = ['bootRepackage', 'findMainClass', 'startScripts']
	    graph.allTasks.findAll {it.name in badTasks}.each { task ->
	        task.enabled = false
	    }
	}
}
